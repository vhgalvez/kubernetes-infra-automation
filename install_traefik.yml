---
- name: Instalar PyPy y configurar Traefik en los Balanceadores de Carga
  hosts: loadbalancer
  gather_facts: false  # Evita fallos en Flatcar Linux
  become: true
  vars:
    traefik_config_dir: "/etc/traefik"
    traefik_namespace: "traefik"
    traefik_service_account: "traefik-sa"
    traefik_cluster_role: "traefik-role"
    traefik_cluster_role_binding: "traefik-role-binding"
    traefik_version: "v2.10"

  tasks:
    - name: Verificar si PyPy ya está instalado
      ansible.builtin.stat:
        path: /opt/bin/python
      register: pypy_installed

    - name: Descargar archivo tar de PyPy si no está instalado
      ansible.builtin.get_url:
        url: "https://downloads.python.org/pypy/pypy3.9-v7.3.9-linux64.tar.bz2"
        dest: "/opt/pypy3.9-v7.3.9-linux64.tar.bz2"
        mode: "0644"
      when: not pypy_installed.stat.exists

    - name: Extraer PyPy si no está instalado
      ansible.builtin.command:
        cmd: "tar -xjf /opt/pypy3.9-v7.3.9-linux64.tar.bz2 -C /opt"
      when: not pypy_installed.stat.exists

    - name: Eliminar archivo tar de PyPy
      ansible.builtin.file:
        path: "/opt/pypy3.9-v7.3.9-linux64.tar.bz2"
        state: absent
      when: not pypy_installed.stat.exists

    - name: Crear directorio /opt/bin si no existe
      ansible.builtin.file:
        path: /opt/bin
        state: directory
        mode: "0755"

    - name: Crear enlace simbólico para PyPy
      ansible.builtin.file:
        src: "/opt/pypy3.9-v7.3.9-linux64/bin/pypy3"
        dest: "/opt/bin/python"
        state: link
      when: not pypy_installed.stat.exists

    - name: Verificar instalación de PyPy
      ansible.builtin.command:
        cmd: "/opt/bin/python --version"
      register: pypy_version
      changed_when: false

    - name: Mostrar versión de PyPy instalada
      ansible.builtin.debug:
        msg: "PyPy instalado: {{ pypy_version.stdout }}"

    - name: Verificar si kubectl está instalado
      ansible.builtin.raw: "command -v kubectl >/dev/null 2>&1 && echo 'yes' || echo 'no'"
      register: kubectl_installed
      changed_when: false

    - name: Instalar kubectl si no está presente
      ansible.builtin.raw: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        mv kubectl /usr/local/bin/
      when: kubectl_installed.stdout == "no"

    - name: Crear namespace para Traefik
      ansible.builtin.raw: "kubectl create namespace {{ traefik_namespace }} --dry-run=client -o yaml | kubectl apply -f -"
      changed_when: false

    - name: Crear ServiceAccount para Traefik
      ansible.builtin.raw: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: {{ traefik_service_account }}
          namespace: {{ traefik_namespace }}
        EOF
      changed_when: false

    - name: Crear ClusterRole para Traefik
      ansible.builtin.raw: |
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: {{ traefik_cluster_role }}
        rules:
        - apiGroups: [""]
          resources: ["services", "endpoints", "pods", "secrets"]
          verbs: ["get", "list", "watch"]
        - apiGroups: ["networking.k8s.io"]
          resources: ["ingresses", "ingressclasses"]
          verbs: ["get", "list", "watch"]
        - apiGroups: ["traefik.containo.us"]
          resources: ["middlewares", "ingressroutes"]
          verbs: ["get", "list", "watch"]
        EOF
      changed_when: false

    - name: Crear ClusterRoleBinding para Traefik
      ansible.builtin.raw: |
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: {{ traefik_cluster_role_binding }}
        subjects:
        - kind: ServiceAccount
          name: {{ traefik_service_account }}
          namespace: {{ traefik_namespace }}
        roleRef:
          kind: ClusterRole
          name: {{ traefik_cluster_role }}
          apiGroup: rbac.authorization.k8s.io
        EOF
      changed_when: false

    - name: Desplegar Traefik como Ingress Controller
      ansible.builtin.raw: |
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: traefik
          namespace: {{ traefik_namespace }}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: traefik
          template:
            metadata:
              labels:
                app: traefik
            spec:
              serviceAccountName: {{ traefik_service_account }}
              containers:
              - name: traefik
                image: traefik:{{ traefik_version }}
                args:
                - "--api.insecure=true"
                - "--providers.kubernetesingress=true"
                - "--entrypoints.web.address=:80"
                ports:
                - name: web
                  containerPort: 80
                  protocol: TCP
        EOF
      changed_when: false

    - name: Exponer Traefik con un LoadBalancer
      ansible.builtin.raw: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: traefik
          namespace: {{ traefik_namespace }}
        spec:
          selector:
            app: traefik
          ports:
          - protocol: TCP
            port: 80
            targetPort: 80
          type: LoadBalancer
        EOF
      changed_when: false

    - name: Verificar si Traefik está en ejecución
      ansible.builtin.raw: "kubectl get pods -n {{ traefik_namespace }}"
      register: traefik_status
      changed_when: false

    - name: Mostrar estado de Traefik
      debug:
        msg: "{{ traefik_status.stdout_lines }}"
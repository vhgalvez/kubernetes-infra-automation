---
- name: Instalar PyPy y configurar Traefik en los Balanceadores de Carga
  hosts: loadbalancer
  gather_facts: false  # No intentamos recoger facts porque Ansible necesita Python
  become: true
  vars:
    traefik_config_dir: "/etc/traefik"
    traefik_domain: "traefik.local"
    letsencrypt_email: "tu-email@dominio.com"
    k3s_master_ip: "10.17.4.21"
    kubeconfig_path: "/root/.kube/config"
    pypy_path: "/opt/bin/python"

  tasks:
    - name: Verificar si PyPy está instalado
      ansible.builtin.raw: "[ -x {{ pypy_path }} ] && echo 'yes' || echo 'no'"
      register: pypy_installed
      changed_when: false

    - name: Descargar PyPy si no está instalado
      ansible.builtin.raw: "wget -q -P /opt/ https://downloads.python.org/pypy/pypy3.9-v7.3.9-linux64.tar.bz2"
      when: pypy_installed.stdout != "yes"

    - name: Extraer PyPy
      ansible.builtin.raw: "tar -xjf /opt/pypy3.9-v7.3.9-linux64.tar.bz2 -C /opt"
      when: pypy_installed.stdout != "yes"

    - name: Eliminar archivo tar de PyPy
      ansible.builtin.raw: "rm -rf /opt/pypy3.9-v7.3.9-linux64.tar.bz2"
      when: pypy_installed.stdout != "yes"

    - name: Crear directorio /opt/bin si no existe
      ansible.builtin.raw: "mkdir -p /opt/bin"
      when: pypy_installed.stdout != "yes"

    - name: Crear enlace simbólico para PyPy
      ansible.builtin.raw: "ln -s /opt/pypy3.9-v7.3.9-linux64/bin/pypy3 /opt/bin/python"
      when: pypy_installed.stdout != "yes"

    - name: Configurar Python en Ansible
      set_fact:
        ansible_python_interpreter: "{{ pypy_path }}"

    - name: Instalar dependencias necesarias
      package:
        name:
          - ca-certificates
          - openssh-clients
          - bzip2
        state: present

    - name: Verificar si kubeconfig existe
      stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_check

    - name: Copiar kubeconfig desde el master si no existe
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ kubeconfig_path }}"
        flat: yes
      when: not kubeconfig_check.stat.exists
      become: true
      delegate_to: "{{ k3s_master_ip }}"
      register: fetch_result

    - name: Asegurar que el directorio de Traefik exista
      file:
        path: "{{ traefik_config_dir }}"
        state: directory
        mode: "0755"

    - name: Asegurar que el archivo acme.json exista y tenga permisos 600
      file:
        path: "{{ traefik_config_dir }}/acme.json"
        state: touch
        mode: "0600"

    - name: Copiar el archivo kubeconfig al directorio de Traefik
      copy:
        src: "{{ kubeconfig_path }}"
        dest: "{{ traefik_config_dir }}/kubeconfig"
        mode: "0600"
      when: kubeconfig_check.stat.exists

    - name: Obtener el token de K3s
      ansible.builtin.raw: "sudo cat /var/lib/rancher/k3s/server/node-token"
      delegate_to: "{{ k3s_master_ip }}"
      register: k3s_token_raw
      changed_when: false

    - name: Guardar el token de K3s
      ansible.builtin.set_fact:
        k3s_token: "{{ k3s_token_raw.stdout | trim }}"

    - name: Obtener el certificado del API de K3s
      ansible.builtin.raw: "sudo cat /var/lib/rancher/k3s/server/tls/server-ca.crt"
      delegate_to: "{{ k3s_master_ip }}"
      register: k3s_ca_cert_raw
      changed_when: false

    - name: Guardar certificado de K3s
      ansible.builtin.set_fact:
        k3s_ca_cert: "{{ k3s_ca_cert_raw.stdout }}"

    - name: Copiar token de K3s
      copy:
        content: "{{ k3s_token }}"
        dest: "{{ traefik_config_dir }}/k3s_token"
        mode: "0600"

    - name: Copiar certificado de K3s
      copy:
        content: "{{ k3s_ca_cert }}"
        dest: "{{ traefik_config_dir }}/k8s-ca.crt"
        mode: "0600"

    - name: Copiar configuración de Traefik
      template:
        src: templates/traefik.toml.j2
        dest: "{{ traefik_config_dir }}/traefik.toml"

    - name: Instalar Docker si no está instalado
      ansible.builtin.raw: |
        if ! command -v docker &> /dev/null; then
          curl -fsSL https://get.docker.com | sh
        fi

    - name: Descargar imagen de Traefik
      ansible.builtin.raw: "docker pull traefik:v2.10"

    - name: Crear y ejecutar el contenedor de Traefik
      ansible.builtin.raw: |
        docker run -d --name traefik \
        --restart=always \
        -p 80:80 -p 443:443 \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v {{ traefik_config_dir }}:/etc/traefik \
        traefik:v2.10
---
- name: Instalar PyPy y configurar Traefik en los Balanceadores de Carga
  hosts: loadbalancer
  become: true
  vars:
    traefik_config_dir: "/etc/traefik"
    traefik_domain: "traefik.local"
    letsencrypt_email: "tu-email@dominio.com"
    k3s_master_ip: "10.17.4.21"
    kubeconfig_path: "/root/.kube/config"
    k3s_master_python_interpreter: "/opt/bin/python"

  tasks:
    # Verificar si Python 3 está instalado, de lo contrario, instalarlo
    - name: Verificar si Python 3 está instalado
      stat:
        path: /usr/bin/python3
      register: python3_installed

    - name: Instalar Python 3 si no está instalado
      package:
        name: python3
        state: present
      when: not python3_installed.stat.exists

    # Instalar bzip2 antes de intentar extraer el archivo
    - name: Instalar bzip2
      package:
        name: bzip2
        state: present

    # Resto de las tareas...

    # Instalar PyPy en nodos Flatcar
    - name: Descargar archivo tar de PyPy
      command: "wget -q -P /opt/ https://downloads.python.org/pypy/pypy3.9-v7.3.9-linux64.tar.bz2"

    - name: Extraer PyPy (con tar -xjf para descomprimir .bz2)
      command: "tar -xjf /opt/pypy3.9-v7.3.9-linux64.tar.bz2 -C /opt"

    - name: Eliminar archivo tar
      command: "rm -rf /opt/pypy3.9-v7.3.9-linux64.tar.bz2"

    # Asegurar que /opt/bin/ exista antes de crear el enlace simbólico
    - name: Crear directorio /opt/bin si no existe
      file:
        path: /opt/bin
        state: directory
        mode: "0755"

    # Eliminar el enlace simbólico si ya existe
    - name: Eliminar enlace simbólico /opt/bin/python si existe
      file:
        path: /opt/bin/python
        state: absent

    - name: Crear enlace simbólico para python
      command: "ln -s /opt/pypy3.9-v7.3.9-linux64/bin/pypy3 /opt/bin/python"

    # Instalación y configuración de Traefik en los Balanceadores de Carga
    - name: Instalar dependencias necesarias en los balanceadores
      package:
        name:
          - python3
          - python3-pip
          - python3-cryptography
          - openssh-clients
          - ca-certificates
        state: present

    - name: Verificar si kubeconfig existe
      stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_check

    - name: Crear directorio .kube en el master
      file:
        path: /root/.kube
        state: directory
        mode: '0700'
      delegate_to: "{{ k3s_master_ip }}"
      when: not kubeconfig_check.stat.exists
      vars:
        ansible_python_interpreter: "{{ k3s_master_python_interpreter }}"

    - name: Copiar kubeconfig desde el master si no existe
      fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ kubeconfig_path }}"
        flat: yes
      when: not kubeconfig_check.stat.exists
      become: true
      delegate_to: "{{ k3s_master_ip }}"
      register: fetch_result
      vars:
        ansible_python_interpreter: "{{ k3s_master_python_interpreter }}"
      ignore_errors: yes

    - name: Verificar si la copia falló
      fail:
        msg: "No se pudo copiar el archivo kubeconfig desde el master"
      when: fetch_result is failed

    - name: Mostrar barra de progreso durante la transferencia
      debug:
        msg: "Copiando kubeconfig desde el master..."
      when: fetch_result is defined and fetch_result.changed

    - name: Asegurar que el directorio de Traefik exista
      file:
        path: "{{ traefik_config_dir }}"
        state: directory
        mode: "0755"

    - name: Asegurar que el archivo acme.json exista y tenga permisos 600
      file:
        path: "{{ traefik_config_dir }}/acme.json"
        state: touch
        mode: "0600"

    - name: Copiar el archivo kubeconfig al directorio de Traefik
      copy:
        src: "{{ kubeconfig_path }}"
        dest: "{{ traefik_config_dir }}/kubeconfig"
        mode: "0600"
      when: kubeconfig_check.stat.exists

    - name: Obtener el token de K3s desde el master
      ansible.builtin.raw: "sudo cat /var/lib/rancher/k3s/server/node-token"
      delegate_to: "{{ k3s_master_ip }}"
      register: k3s_token_raw
      changed_when: false

    - name: Guardar el token de K3s
      ansible.builtin.set_fact:
        k3s_token: "{{ k3s_token_raw.stdout | trim }}"

    - name: Obtener el certificado del API de K3s
      ansible.builtin.raw: "sudo cat /var/lib/rancher/k3s/server/tls/server-ca.crt"
      delegate_to: "{{ k3s_master_ip }}"
      register: k3s_ca_cert_raw
      changed_when: false

    - name: Guardar certificado de K3s
      ansible.builtin.set_fact:
        k3s_ca_cert: "{{ k3s_ca_cert_raw.stdout }}"

    - name: Copiar token de K3s
      copy:
        content: "{{ k3s_token }}"
        dest: "{{ traefik_config_dir }}/k3s_token"
        mode: "0600"

    - name: Copiar certificado de K3s
      copy:
        content: "{{ k3s_ca_cert }}"
        dest: "{{ traefik_config_dir }}/k8s-ca.crt"
        mode: "0600"

    - name: Copiar configuración de Traefik
      template:
        src: templates/traefik.toml.j2
        dest: "{{ traefik_config_dir }}/traefik.toml"

    - name: Instalar la biblioteca Kubernetes en Python
      pip:
        name: kubernetes
        state: present

    - name: Crear ClusterRole para Traefik
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: traefik-role
          rules:
            - apiGroups: [""]
              resources:
                ["pods", "services", "endpoints", "secrets", "configmaps"]
              verbs: ["get", "list", "watch"]
            - apiGroups: ["networking.k8s.io"]
              resources: ["ingresses", "ingressclasses"]
              verbs: ["get", "list", "watch"]
            - apiGroups: ["traefik.containo.us"]
              resources: ["ingressroutes", "middlewares"]
              verbs: ["get", "list", "watch"]
      environment:
        K8S_AUTH_KUBECONFIG: "{{ traefik_config_dir }}/kubeconfig"

    - name: Crear ClusterRoleBinding para Traefik
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: traefik-role-binding
          subjects:
            - kind: ServiceAccount
              name: traefik
              namespace: kube-system
          roleRef:
            kind: ClusterRole
            name: traefik-role
            apiGroup: rbac.authorization.k8s.io

    - name: Reiniciar Traefik
      shell: "docker restart traefik || docker-compose up -d"
      args:
        chdir: "{{ traefik_config_dir }}"
      become: true
